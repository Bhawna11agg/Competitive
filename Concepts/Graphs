//Terminologies:
  Adjacent vertix is the vertix if it has a common edge.
  Degree: Number of edges coming out of that verex is its degree.
  Path:Path is collection of edges from which we can access a vertex from a vertex
  Connected Graph: If every vertex has path to go to any vertex that can be direct edge or path
  Connected Components: Complete Graph must not be connected but the different parts are connected in itself.
  Complete Graph: every vertex connect to every other vertex via edge.
  
  If we have n vertex;
  1.minimum number of edges in graph=0
  2.minimum number of edges in connected graph=(n-1)
  3.minimum number of edges in Complete graph= (nC2)
  
  
  //Implementation
  Edge List: in this we will array of pairs and that pair will consist of src vertex and dest vertex.
              Complexity is O(n^2) in searching any edge so we dont use it
              
  Adjancency List: in this we will make a vector of all vertex and to that vector element we will connect unordered map/vector
                   which contains all the direct edge reaching vertex.
                   Complexity O(n) in vector list and O(1) in map
                   
  Adjancency Matrix: it contain 2D matrix in which true or false store if it is connected to that vertex directly
                      Space O(n^2), time O(n)
                      
 // BFS Traversal (Print the adjacent first)
 We will achieve this by the help of queue data structure in it
 
 //Tip:: we are using pop in last of every function because we are no passing same queue in every function call it is created every time
 different so poping in different function cant pop in previous queue.
 
 Code:
 #include <iostream>
using namespace std;
#include<queue>
void print(int **arr,int V,int *visited,queue<int>q){
    if(q.size()==0){
        return;
    }
    int x=q.front();
    cout<<x<<" ";
    q.pop();
    for(int i=0;i<V;i++){ //push adjacent elements in queue
        if(i==x){
            continue;
        }
        if(visited[i]==1){
            continue;
        }
        if(arr[x][i]==1){
            visited[i]=1;
            q.push(i);
        }
    }
    if(q.size()==0){
        return;
    }
   print(arr,V,visited,q);
    q.pop();
}
int main() {
    int V, E;
    cin >> V >> E;
    queue<int>q;
    int** arr=new int*[V];
    for(int i=0;i<V;i++) {
       arr[i]=new int[V];
        for(int j=0;j<V;j++){  //adjacency matrix
            arr[i][j]=0;
        }
    }
    for(int i=0;i<E;i++){
        int f,s;
        cin>>f>>s;
        arr[f][s]=1;      //input the edges and mark it in adjacency matrix
        arr[s][f]=1;
    }
    int *visited=new int[V];
    for(int i=0;i<V;i++){
        visited[i]=0;       // visited array
    }
    for(int i=0;i<V;i++){
        if(!visited[i]){
          q.push(i);           //push elements in queue
         visited[i]=1;
         print(arr,V,visited,q);
         q.pop();//pass to print the lements
        }
    }
  return 0;
}
