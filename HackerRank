#include<bits/stdc++.h>
                          //https://www.hackerrank.com/challenges/tree-top-view/problem
using namespace std;

class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};

class Solution {
    public:
  		Node* insert(Node* root, int data) {
            if(root == NULL) {
                return new Node(data);
            } else {
                Node* cur;
                if(data <= root->data) {
                    cur = insert(root->left, data);
                    root->left = cur;
                } else {
                    cur = insert(root->right, data);
                    root->right = cur;
               }

               return root;
           }
        }

/*
class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};

*/
     unordered_map<int,int>map,map1;
      int start=0,end=0;
    void top(Node* root,int ct,int order){
        if(root==NULL){
            return;
        }
        if(map.count(ct)==0 || map1[ct]>order){
             map1[ct]=order;
            map[ct]=root->data;
          if(ct<start){
              start=ct;
          }
          if(ct>end){
              end=ct;
           }
        }
        top(root->left,ct-1,order+1);
        top(root->right,ct+1,order+1);    
    } 
    void topView(Node * root) {
       map[0]=root->data;
       map1[0]=0;
       top(root->left,-1,1);
       top(root->right,1,1);
       for(int i=start;i<=end;i++){
           cout<<map[i]<<" ";
       }
    }

}; //End of Solution

int main() {
  
    Solution myTree;
    Node* root = NULL;
    
    int t;
    int data;

    std::cin >> t;

    while(t-- > 0) {
        std::cin >> data;
        root = myTree.insert(root, data);
    }
  
	myTree.topView(root);
    return 0;
}
