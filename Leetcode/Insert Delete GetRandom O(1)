

// maps are the datastructure that takes O(1) time to insert, delete and search elements.
#include<unordered_map>
class RandomizedSet {
public:
    /** Initialize your data structure here. */
    unordered_map<int,int> map;
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(map.count(val)==0){
            map[val]=1;
            return true;
        }
        else{
            return false;
        }
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
         if(map.count(val)!=0){
             map.erase(val);
             return true;
         }
        return false;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        unordered_map<int,int>:: iterator it;
        it=map.begin();
      advance(it, rand() % map.size()); // advance function basically iterate the iterator by a fixed distance.
       int random_key = it->first; // advance takes 2 elements iterator and length...rand() functions picks an random number
        return random_key;
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
